<!DOCTYPE HTML>
<html>
<body>

<h2 style="font-family:arial;color:black;font-size:30px;">
3/22/2018 Meeting Record
</h2>

<h3 style="font-family:arial;color:black;font-size:18px;">
1. Previous Questions<br/>
</h3>

<p>
Q1: Do we still need to calculate the coefficients?<br/>
A1: No. Not until we start to consider the interaction between different species.
</p>

<p>
Q2: Is insertion of new atoms to the specific site of the previous atom necessary?<br/>
A2: I don't think it's necessary because I've tried not to do that and the result is fine. Poscar will make adjustment during calculation. <br/>
(We forgot to ask Shyam about it, next time we can make sure.)
</p>

<p>
Q3: How to submit multiple jobs?<br/>
A3: import glob from python lib.<br/> 
Zini: I will figure it out by myself.
</p>

<p>
Q4: About creating vacancies.<br/>
Zini's way:<br/>
<b>Step1:</b>Find the smallest supercell that satisfy the required vacancy concentration, for example, if we want a 25% vacancy concentration, the least Li atoms we need is 4, so that we just need to remove 1 atom.<br/>
<b>Step2:</b>Get the indices of the target specie, e.g.:'Zn'<br/>
<code>
In [17]: structure.indices_from_symbol("Zn")<br/>
Out[17]: (0, 1, 2, 3)
</code><br/>
<b>Step3:</b>Use spacegroup analyzer to find the equivalent positions:<br/>
<code>
In [18]: from pymatgen.analysis.structure_analyzer import SpacegroupAnalyzer<br/>
In [19]: sga = SpacegroupAnalyzer(structure)<br/>
In [20]: sym_struc = sga.get_symmetrized_structure()<br/>
In [21]: sym_struc.equivalent_indices<br/>
Out[22]: [[0, 1, 2, 3], [4, 5, 6, 7]]
</code><br/>
from <code>out[22]</code> we can pick the indices of species we want and do the removal.<br/>
<b>Step4:</b>Construct all possible structures of target vacancy concentration, but without swapping. Relax them and find out the original structure with lowest energy.<br/>
<b>Step5:</b>We can then start swapping. ;)<br/>
</p>

<h3 style="font-family:arial;color:black;font-size:18px;">
2. Analyze The Outcome<br/>
</h3>

<p>
<b>Go to the target folder</b><br/>
<code>
In [2]: from pymatgen.io.vasp.outputs import Vasprun<br/>
In [3]: v = Vasprun("vasprun.xml")<br/>
In [5]: v.converged<br/>
Out[5]: True<br/>
In [6]: v.final_energy<br/>
Out[6]: -28.0732105<br/>
In [7]: v.final_structure
</code><br/>

<pre>
<code style="font-size:12px;">
Structure Summary
Lattice
    abc : 5.45027 5.45027 5.45027
 angles : 90.0 90.0 90.0
 volume : 161.90268521693466
      A : 5.45027 0.0 0.0
      B : 0.0 5.45027 0.0
      C : 0.0 0.0 5.45027
PeriodicSite: Zn (0.0000, 0.0000, 0.0000) [0.0000, 0.0000, 0.0000]
PeriodicSite: Zn (0.0000, 2.7251, 2.7251) [0.0000, 0.5000, 0.5000]
PeriodicSite: Zn (2.7251, 0.0000, 2.7251) [0.5000, 0.0000, 0.5000]
......
</code><br/>
</pre>
<code>
In [8]: v.initial_structure<br/>
Out[8]:
<code><br/>

<pre>
<code style="font-size:12px;">
Structure Summary
Lattice
    abc : 5.45027 5.45027 5.45027
 angles : 90.0 90.0 90.0
 volume : 161.90268521693466
      A : 5.45027 0.0 0.0
      B : 0.0 5.45027 0.0
      C : 0.0 0.0 5.45027
PeriodicSite: Zn (0.0000, 0.0000, 0.0000) [0.0000, 0.0000, 0.0000]
PeriodicSite: Zn (0.0000, 2.7251, 2.7251) [0.0000, 0.5000, 0.5000]
PeriodicSite: Zn (2.7251, 0.0000, 2.7251) [0.5000, 0.0000, 0.5000]
PeriodicSite: Zn (2.7251, 2.7251, 0.0000) [0.5000, 0.5000, 0.0000]
......
</code><br/>
</pre>

<pre>
<code>
In [9]: pretend_made_structure = v.initial_structure.copy()
In [11]: from pymatgen.analysis.structure_matcher import StructureMatcher
In [12]: sm = StructureMatcher()
In [13]: sm.fit(pretend_made_structure,v.initial_structure)
Out[13]: True
In [14]: sm.fit(pretend_made_structure,v.final_structure)
Out[14]: True
</code><br/>
</pre>

[I am not quite sure why we need these functions. Normally the final structure we get after calculation should be different. But anyway it's not bad to learn something new.]<br/>
There are many other interesting functions to plot...<br/>

<code>
In[22]:  v.initial_structure.indices_from_symbol("Zn")[:int(len(v.initial_structure.indices_from_symbol ("Zn"))*0.75)]<br/>
Out[22]: (0, 1, 2)<br/>
</code>

Ways to find out all possible combination...<br/>
<code>
<pre>
In [23]: from itertools import combinations
In [24]: combinations((0,1,2,3),2)
Out[24]: itertools.combinations at 0x2b8a1dd23a98
In [25]: list(combinations((0,1,2,3),2))
Out[25]: [(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]
In [26]: list(combinations((0,1,2,3),3))
Out[26]: [(0, 1, 2), (0, 1, 3), (0, 2, 3), (1, 2, 3)]
</pre>
</code><br/>
</p>

</body>
</html>







